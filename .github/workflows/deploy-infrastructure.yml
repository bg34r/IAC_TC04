name: Deploy Microservico API

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
        - plan
        - apply
        - destroy

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Update user-data script with environment variables
      run: |
        # Create a temporary file with environment variables replaced
        envsubst < infra/user-data.sh > infra/user-data-with-env.sh
        chmod +x infra/user-data-with-env.sh
        mv infra/user-data-with-env.sh infra/user-data.sh
      env:
        APP_ENV: ${{ secrets.APP_ENV || 'development' }}
        SERVER_ADDRESS: ${{ secrets.SERVER_ADDRESS || ':8080' }}
        PORT: ${{ secrets.PORT || '8080' }}
        CONTEXT_TIMEOUT: ${{ secrets.CONTEXT_TIMEOUT || '2' }}
        DB_HOST: ${{ secrets.DB_HOST || 'localhost' }}
        DB_PORT: ${{ secrets.DB_PORT || '3306' }}
        DB_USER: ${{ secrets.DB_USER || 'root' }}
        DB_PASS: ${{ secrets.DB_PASS || 'password' }}
        DB_NAME: ${{ secrets.DB_NAME || 'lanchonete' }}
        PRODUTO_QUEUE_URL: ${{ secrets.PRODUTO_QUEUE_URL || '' }}
        CLIENTE_QUEUE_URL: ${{ secrets.CLIENTE_QUEUE_URL || '' }}
        PEDIDO_QUEUE_URL: ${{ secrets.PEDIDO_QUEUE_URL || '' }}
        ACCESS_TOKEN_EXPIRY_HOUR: ${{ secrets.ACCESS_TOKEN_EXPIRY_HOUR || '2' }}
        REFRESH_TOKEN_EXPIRY_HOUR: ${{ secrets.REFRESH_TOKEN_EXPIRY_HOUR || '168' }}
        ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET || 'access_token_secret' }}
        REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET || 'refresh_token_secret' }}
    
    - name: Terraform Init
      run: |
        cd infra
        terraform init
    
    - name: Terraform Format
      run: |
        cd infra
        echo "Checking Terraform formatting..."
        terraform fmt -recursive
        echo "Files have been formatted."
    
    - name: Terraform Validate
      run: |
        cd infra
        terraform validate
    
    - name: Terraform Plan
      run: |
        cd infra
        if [ -f "terraform.tfvars" ]; then
          terraform plan -var-file="terraform.tfvars"
        else
          echo "terraform.tfvars not found, running plan without var-file"
          terraform plan
        fi
      env:
        TF_VAR_key_name: ${{ secrets.AWS_KEY_NAME }}
        TF_VAR_security_group_name: "microservico-dev-sg"
        TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
    
    - name: Terraform Apply
      if: github.event.inputs.action != 'plan' && github.event.inputs.action != 'destroy'
      run: |
        cd infra
        if [ -f "terraform.tfvars" ]; then
          terraform apply -auto-approve -var-file="terraform.tfvars"
        else
          echo "terraform.tfvars not found, running apply without var-file"
          terraform apply -auto-approve
        fi
      env:
        TF_VAR_key_name: ${{ secrets.AWS_KEY_NAME }}
        TF_VAR_security_group_name: "microservico-dev-sg"
        TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
    
    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        cd infra
        if [ -f "terraform.tfvars" ]; then
          terraform destroy -auto-approve -var-file="terraform.tfvars"
        else
          echo "terraform.tfvars not found, running destroy without var-file"
          terraform destroy -auto-approve
        fi
      env:
        TF_VAR_key_name: ${{ secrets.AWS_KEY_NAME }}
        TF_VAR_security_group_name: "microservico-dev-sg"
        TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
    
    - name: Output Results
      if: github.event.inputs.action != 'destroy'
      run: |
        cd infra
        echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
        terraform output -json | jq -r 'to_entries[] | "- **\(.key)**: \(.value.value)"' >> $GITHUB_STEP_SUMMARY