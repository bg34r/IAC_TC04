name: Deploy Microservico API

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
        - plan
        - apply
        - destroy

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Create environment file
      run: |
        cd infra
        echo "Creating .env file with application configuration..."
        cat > .env << EOF
        APP_ENV=$APP_ENV
        SERVER_ADDRESS=$SERVER_ADDRESS
        PORT=$PORT
        CONTEXT_TIMEOUT=$CONTEXT_TIMEOUT
        DB_HOST=$DB_HOST
        DB_PORT=$DB_PORT
        DB_USER=$DB_USER
        DB_PASS=$DB_PASS
        DB_NAME=$DB_NAME
        PRODUTO_QUEUE_URL=$PRODUTO_QUEUE_URL
        CLIENTE_QUEUE_URL=$CLIENTE_QUEUE_URL
        PEDIDO_QUEUE_URL=$PEDIDO_QUEUE_URL
        ACCESS_TOKEN_EXPIRY_HOUR=$ACCESS_TOKEN_EXPIRY_HOUR
        REFRESH_TOKEN_EXPIRY_HOUR=$REFRESH_TOKEN_EXPIRY_HOUR
        ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET
        REFRESH_TOKEN_SECRET=$REFRESH_TOKEN_SECRET
        EOF
        echo ".env file created successfully"
      env:
        APP_ENV: ${{ secrets.APP_ENV }}
        SERVER_ADDRESS: ${{ secrets.SERVER_ADDRESS }}
        PORT: ${{ secrets.PORT }}
        CONTEXT_TIMEOUT: ${{ secrets.CONTEXT_TIMEOUT }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASS: ${{ secrets.DB_PASS }}
        DB_NAME: ${{ secrets.DB_NAME }}
        PRODUTO_QUEUE_URL: ${{ secrets.PRODUTO_QUEUE_URL }}
        CLIENTE_QUEUE_URL: ${{ secrets.CLIENTE_QUEUE_URL }}
        PEDIDO_QUEUE_URL: ${{ secrets.PEDIDO_QUEUE_URL }}
        ACCESS_TOKEN_EXPIRY_HOUR: ${{ secrets.ACCESS_TOKEN_EXPIRY_HOUR }}
        REFRESH_TOKEN_EXPIRY_HOUR: ${{ secrets.REFRESH_TOKEN_EXPIRY_HOUR }}
        ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
        REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
    
    - name: Terraform Init
      run: |
        cd infra
        terraform init
    
    - name: Terraform Format
      run: |
        cd infra
        echo "Checking Terraform formatting..."
        terraform fmt -recursive
        echo "Files have been formatted."
    
    - name: Terraform Validate
      run: |
        cd infra
        terraform validate
    
    - name: Terraform Plan
      run: |
        cd infra
        if [ -f "terraform.tfvars" ]; then
          terraform plan -var-file="terraform.tfvars"
        else
          echo "terraform.tfvars not found, running plan without var-file"
          terraform plan
        fi
      env:
        TF_VAR_key_name: ${{ secrets.AWS_KEY_NAME }}
        TF_VAR_grupoDeSeguranca: "microservico-dev-sg"
        TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
    
    - name: Terraform Apply
      if: github.event.inputs.action != 'plan' && github.event.inputs.action != 'destroy'
      run: |
        cd infra
        if [ -f "terraform.tfvars" ]; then
          terraform apply -auto-approve -var-file="terraform.tfvars"
        else
          echo "terraform.tfvars not found, running apply without var-file"
          terraform apply -auto-approve
        fi
      env:
        TF_VAR_key_name: ${{ secrets.AWS_KEY_NAME }}
        TF_VAR_grupoDeSeguranca: "microservico-dev-sg"
        TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
    
    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        cd infra
        if [ -f "terraform.tfvars" ]; then
          terraform destroy -auto-approve -var-file="terraform.tfvars"
        else
          echo "terraform.tfvars not found, running destroy without var-file"
          terraform destroy -auto-approve
        fi
      env:
        TF_VAR_key_name: ${{ secrets.AWS_KEY_NAME }}
        TF_VAR_grupoDeSeguranca: "microservico-dev-sg"
        TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
    
    - name: Output Results
      if: github.event.inputs.action != 'destroy'
      run: |
        cd infra
        echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
        
        # Check if there are any outputs before trying to parse
        if terraform output -json > /dev/null 2>&1; then
          OUTPUT=$(terraform output -json)
          if [ "$OUTPUT" != "{}" ] && [ -n "$OUTPUT" ]; then
            echo "$OUTPUT" | jq -r 'to_entries[] | "- **\(.key)**: \(.value.value)"' >> $GITHUB_STEP_SUMMARY
          else
            echo "No outputs available." >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "No outputs to display." >> $GITHUB_STEP_SUMMARY
        fi