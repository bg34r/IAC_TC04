name: Deploy Microservico API

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
        - plan
        - apply
        - destroy

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Create environment file
      if: github.event.inputs.action != 'destroy'
      run: |
        cd infra
        echo "Creating .env file with application configuration..."
        cat > .env << EOF
        APP_ENV=$APP_ENV
        SERVER_ADDRESS=$SERVER_ADDRESS
        PORT=$PORT
        CONTEXT_TIMEOUT=$CONTEXT_TIMEOUT
        DB_HOST=$DB_HOST
        DB_PORT=$DB_PORT
        DB_USER=$DB_USER
        DB_PASS=$DB_PASS
        DB_NAME=$DB_NAME
        PRODUTO_QUEUE_URL=$PRODUTO_QUEUE_URL
        CLIENTE_QUEUE_URL=$CLIENTE_QUEUE_URL
        PEDIDO_QUEUE_URL=$PEDIDO_QUEUE_URL
        ACCESS_TOKEN_EXPIRY_HOUR=$ACCESS_TOKEN_EXPIRY_HOUR
        REFRESH_TOKEN_EXPIRY_HOUR=$REFRESH_TOKEN_EXPIRY_HOUR
        ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET
        REFRESH_TOKEN_SECRET=$REFRESH_TOKEN_SECRET
        EOF
        echo ".env file created successfully"
      env:
        APP_ENV: ${{ secrets.APP_ENV }}
        SERVER_ADDRESS: ${{ secrets.SERVER_ADDRESS }}
        PORT: ${{ secrets.PORT }}
        CONTEXT_TIMEOUT: ${{ secrets.CONTEXT_TIMEOUT }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASS: ${{ secrets.DB_PASS }}
        DB_NAME: ${{ secrets.DB_NAME }}
        PRODUTO_QUEUE_URL: ${{ secrets.PRODUTO_QUEUE_URL }}
        CLIENTE_QUEUE_URL: ${{ secrets.CLIENTE_QUEUE_URL }}
        PEDIDO_QUEUE_URL: ${{ secrets.PEDIDO_QUEUE_URL }}
        ACCESS_TOKEN_EXPIRY_HOUR: ${{ secrets.ACCESS_TOKEN_EXPIRY_HOUR }}
        REFRESH_TOKEN_EXPIRY_HOUR: ${{ secrets.REFRESH_TOKEN_EXPIRY_HOUR }}
        ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
        REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
    
    - name: Terraform Init
      run: |
        cd infra
        terraform init
    
    - name: Terraform Format
      run: |
        cd infra
        echo "Checking Terraform formatting..."
        terraform fmt -recursive
        echo "Files have been formatted."
    
    - name: Terraform Validate
      run: |
        cd infra
        terraform validate
    
    - name: Terraform Plan
      run: |
        cd infra
        if [ -f "terraform.tfvars" ]; then
          terraform plan -var-file="terraform.tfvars"
        else
          echo "terraform.tfvars not found, running plan without var-file"
          terraform plan
        fi
      env:
        TF_VAR_key_name: ${{ secrets.AWS_KEY_NAME }}
        TF_VAR_grupoDeSeguranca: "microservico-dev-sg"
        TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
        TF_VAR_app_env: ${{ secrets.APP_ENV }}
        TF_VAR_server_address: ${{ secrets.SERVER_ADDRESS }}
        TF_VAR_port: ${{ secrets.PORT }}
        TF_VAR_context_timeout: ${{ secrets.CONTEXT_TIMEOUT }}
        TF_VAR_db_host: ${{ secrets.DB_HOST }}
        TF_VAR_db_port: ${{ secrets.DB_PORT }}
        TF_VAR_db_user: ${{ secrets.DB_USER }}
        TF_VAR_db_pass: ${{ secrets.DB_PASS }}
        TF_VAR_db_name: ${{ secrets.DB_NAME }}
        TF_VAR_produto_queue_url: ${{ secrets.PRODUTO_QUEUE_URL }}
        TF_VAR_cliente_queue_url: ${{ secrets.CLIENTE_QUEUE_URL }}
        TF_VAR_pedido_queue_url: ${{ secrets.PEDIDO_QUEUE_URL }}
        TF_VAR_access_token_expiry_hour: ${{ secrets.ACCESS_TOKEN_EXPIRY_HOUR }}
        TF_VAR_refresh_token_expiry_hour: ${{ secrets.REFRESH_TOKEN_EXPIRY_HOUR }}
        TF_VAR_access_token_secret: ${{ secrets.ACCESS_TOKEN_SECRET }}
        TF_VAR_refresh_token_secret: ${{ secrets.REFRESH_TOKEN_SECRET }}
    
    - name: Terraform Apply
      if: github.event.inputs.action != 'plan' && github.event.inputs.action != 'destroy'
      run: |
        cd infra
        if [ -f "terraform.tfvars" ]; then
          terraform apply -auto-approve -var-file="terraform.tfvars"
        else
          echo "terraform.tfvars not found, running apply without var-file"
          terraform apply -auto-approve
        fi
      env:
        TF_VAR_key_name: ${{ secrets.AWS_KEY_NAME }}
        TF_VAR_grupoDeSeguranca: "microservico-dev-sg"
        TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
        TF_VAR_app_env: ${{ secrets.APP_ENV }}
        TF_VAR_server_address: ${{ secrets.SERVER_ADDRESS }}
        TF_VAR_port: ${{ secrets.PORT }}
        TF_VAR_context_timeout: ${{ secrets.CONTEXT_TIMEOUT }}
        TF_VAR_db_host: ${{ secrets.DB_HOST }}
        TF_VAR_db_port: ${{ secrets.DB_PORT }}
        TF_VAR_db_user: ${{ secrets.DB_USER }}
        TF_VAR_db_pass: ${{ secrets.DB_PASS }}
        TF_VAR_db_name: ${{ secrets.DB_NAME }}
        TF_VAR_produto_queue_url: ${{ secrets.PRODUTO_QUEUE_URL }}
        TF_VAR_cliente_queue_url: ${{ secrets.CLIENTE_QUEUE_URL }}
        TF_VAR_pedido_queue_url: ${{ secrets.PEDIDO_QUEUE_URL }}
        TF_VAR_access_token_expiry_hour: ${{ secrets.ACCESS_TOKEN_EXPIRY_HOUR }}
        TF_VAR_refresh_token_expiry_hour: ${{ secrets.REFRESH_TOKEN_EXPIRY_HOUR }}
        TF_VAR_access_token_secret: ${{ secrets.ACCESS_TOKEN_SECRET }}
        TF_VAR_refresh_token_secret: ${{ secrets.REFRESH_TOKEN_SECRET }}
    
    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        cd infra
        echo "Starting infrastructure destruction..."
        
        # Check terraform state
        echo "Checking Terraform state..."
        if [ -f "terraform.tfstate" ]; then
          echo "State file exists"
          terraform state list || echo "No resources in state"
        else
          echo "No terraform.tfstate file found"
        fi
        
        # Check for remote state
        echo "Checking for remote state..."
        terraform state list 2>/dev/null || echo "No remote state or no resources"
        
        # Show current workspace
        echo "Current workspace: $(terraform workspace show)"
        
        # Run destroy with detailed output
        echo "Running terraform destroy..."
        if [ -f "terraform.tfvars" ]; then
          terraform destroy -auto-approve -var-file="terraform.tfvars" -detailed-exitcode
        else
          echo "terraform.tfvars not found, running destroy without var-file"
          terraform destroy -auto-approve -detailed-exitcode
        fi
        
        DESTROY_EXIT_CODE=$?
        echo "Destroy exit code: $DESTROY_EXIT_CODE"
        
        if [ $DESTROY_EXIT_CODE -eq 0 ]; then
          echo "Resources were destroyed successfully"
        elif [ $DESTROY_EXIT_CODE -eq 2 ]; then
          echo "Resources were destroyed with changes"
        else
          echo "Destroy may have failed or no resources to destroy"
        fi
      env:
        TF_VAR_key_name: ${{ secrets.AWS_KEY_NAME }}
        TF_VAR_grupoDeSeguranca: "microservico-sg"
        TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
        TF_VAR_api_repo_url: "https://github.com/bg34r/IAC_TC04.git"

    - name: Output Results
      if: github.event.inputs.action != 'destroy'
      run: |
        cd infra
        echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Try to get terraform outputs
        if terraform output > /dev/null 2>&1; then
          echo "### Infrastructure Details:" >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY 2>&1 || echo "No outputs available" >> $GITHUB_STEP_SUMMARY
        else
          echo "No outputs to display." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Information:" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
    
    - name: Destroy Summary
      if: github.event.inputs.action == 'destroy'
      run: |
        echo "## 🗑️ Infrastructure Destruction Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Destruction Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Destroyed at**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ All resources have been successfully destroyed." >> $GITHUB_STEP_SUMMARY